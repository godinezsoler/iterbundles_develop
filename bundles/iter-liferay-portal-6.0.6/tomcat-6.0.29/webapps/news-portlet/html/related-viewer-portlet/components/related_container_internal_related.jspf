<%@page import="com.liferay.portal.util.HtmlOptimizer"%>
<%@page import="com.liferay.portal.kernel.util.HtmlUtil"%>
<%@page import="com.liferay.portal.kernel.xml.Element"%>
<%@page import="com.liferay.portal.kernel.xml.SAXReaderUtil"%>
<%@page import="com.liferay.portal.kernel.xml.Document"%>
<%@page import="com.liferay.portal.kernel.util.Validator"%>
<% 
	 
			
	String html = null;
	String viewMode = null;
	try
	{	
		if( articleData != null )
		{
			String relatedId = articleData.getContentId();
			
			JournalArticle relatedArticle = JournalArticleLocalServiceUtil.getArticle(globalGroupId, relatedId);
			
			String linkType  = IterKeys.INTERNAL_LINK_TYPE_CLASS;
			
			
			String relatedLinkName = articleData.getTitle();
			
			String elementClass    = articleData.getLinkclass();
			String requestXML = xmlRequest;
			if( Validator.isNotNull(elementClass) )
			{
				Element classElem = SAXReaderUtil.createElement("link-class");
				classElem.setText(elementClass);
				
				Document requestDom = SAXReaderUtil.read(xmlRequest);
				requestDom.getRootElement().add( classElem );
				requestXML = requestDom.asXML();
			}
			
			String signedArticleId 	 =  IterURLUtil.getSignedArticleId(relatedId);
			
			
			if (relatedLinkName == null || relatedLinkName.isEmpty())
			{
				String headline = PageContentLocalServiceUtil.getWebContentField(relatedArticle, "Headline", locale.toString(), 0);
				if (headline.isEmpty())
					relatedLinkName = relatedArticle.getTitle();
				else
					relatedLinkName = headline;
			}
						
												
			String relatedUrlTitle = relatedArticle.getUrlTitle();
			viewMode = PageContentLocalServiceUtil.getArticleContextInfo(scopeGroupId, relatedId, null);
														
			String faTemplateId = TeaserContentUtil.getTemplateId(relatedArticle, templateIdArticle, templateIdGallery, 
																	 templateIdPoll, templateIdMultimedia);
	
			String raTemplateId = TeaserContentUtil.getTemplateId(relatedArticle, templateIdArticleRestricted, templateIdGalleryRestricted, 
			  											  			templateIdPollRestricted, templateIdMultimediaRestricted);
												
			int templateMode = TeaserContentUtil.getTemplateMode(relatedArticle, modeArticle, modeGallery, modePoll, modeMultimedia);
												
			html = PageContentLocalServiceUtil.getArticleContent(relatedArticle, faTemplateId, raTemplateId, 
																viewMode, themeDisplay, requestXML, templateMode, 
																 request, currentIndex, listResultSize );
			
			String currentCssClass = TeaserContentUtil.getCSSClass(currentIndex, listResultSize, relatedArticle, request);	
			
												
			if(Validator.isNotNull(html))
			{
				String elemTagName = HtmlOptimizer.isEnabled() ? "article" : "li";
%> 
				<<%=elemTagName%> class="element <%=currentCssClass%> <%=linkType%> <%=elementClass%>" iteridart="<%= signedArticleId %>">
					<span class='teaserItemPosition <%=HtmlUtil.getRemovableClass()%>'><%=currentIndex%></span>
					<div class="icon <%=elementClass%>"></div>
						<div class="related-item-wrapper">
							<%=html%>
						</div>
				</<%=elemTagName%>>
				<% 
					currentIndex++;
			}
		}
	}
	catch(Exception e)
	{	
		_log.error(e);
	}
										
%>